//一次买卖交易
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int MP=0,N=INT_MAX;//最大利润、最小进价
        for(size_t i=0;i<prices.size();i++){
            if(prices[i]<N)
                N=prices[i];
            else if(prices[i]-N>MP)
                MP=prices[i]-N;
        }
        return MP;
    }
};


//多次买卖，找股票价格递增区间
class Solution {
public:
	int maxProfit(vector<int>& prices) {
        if(prices.empty())return 0;
		int ret = 0;
		size_t i = 0, j = 0;
		while (i<prices.size()-1){
			while (j<prices.size() - 1 && prices[j] <= prices[j + 1])//价格递增
				j++;
			ret += prices[j] - prices[i];
			i = j;//更新区间起点
			while (j < prices.size() - 1 && prices[j] >= prices[j + 1])//递减区间
				j++;
			i = j;
		}
		return ret;
	}
};

//两次交易
//C++动态规划解，数组存储前面天数买一次最大赚的钱，买两次赚的钱即为第i天赚的钱+当
//前天的价格减去i天的价格，求一个最大值即可
class Solution {
public:
    int maxProfit(vector<int>& prices) {
      if(prices.size()==0)  return 0;
      int minnum=prices[0];
      vector<int> dp(prices.size()+1,0);
      int res=0;
      for(int i=2;i<=prices.size();i++)
      {
           if(prices[i-1]<=prices[i-2])  dp[i]=dp[i-1];
           else
           {
               dp[i]=max(prices[i-1]-minnum,dp[i-1]);
               for(int j=i-1;j>0;j--)
               res=max(res,dp[j]+prices[i-1]-prices[j-1]); 
           }
          minnum=min(minnum,prices[i-1]);
      }
    return res;
    }
};
