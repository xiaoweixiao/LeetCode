//求一个字符串的最长回文子串，我们可以将以每个字符为首的子串都遍历一遍，判断是否为回文，如果是回文，再判断最大长度的回文子串。
//算法简单，但是算法复杂度太高，O（n^3）

//动态规划，对于字符串str，假设dp[i,j]=1表示str[i...j]是回文子串，那个必定存在dp[i+1,j-1]=1。
//这样最长回文子串就能分解成一系列子问题，可以利用动态规划求解了。首先构造状态转移方程
![imgage ](https://github.com/xiaoweixiao/LeetCode/blob/master/picture/452750-20161030112606812-2106192201.png)
'''c
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.empty())return "";
        if(s.size()==1)return s;
        int len=s.size();
        int longest=1,start=0;
        vector<vector<bool>> dp(len,vector<bool>(len,0));
        
        for(int i=0;i<len;i++){
            dp[i][i]=true;
            if(i<len-1&&s[i]==s[i+1]){
                start=i;
                longest=2;
                dp[i][i+1]=true;
            }
        }
        for(int len1=3;len1<=len;len1++){//子串长度
            for(int i=0;i+len1-1<len;i++){//起始点
                int j=i+len1-1;//终点
                if(s[i]==s[j]&&dp[i+1][j-1]==true){
                    start=i;
                    longest=len1;
                    dp[i][j]=true;
                }
            }
        }
        return s.substr(start,longest);
    }
};
'''
