//一次买卖交易
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int MP=0,N=INT_MAX;
        for(size_t i=0;i<prices.size();i++){
            if(prices[i]<N)
                N=prices[i];
            else if(prices[i]-N>MP)
                MP=prices[i]-N;
        }
        return MP;
    }
};


//多次买卖，找股票价格递增区间
class Solution {
public:
	int maxProfit(vector<int>& prices) {
        if(prices.empty())return 0;
		int ret = 0;
		size_t i = 0, j = 0;
		while (i<prices.size()-1){
			while (j<prices.size() - 1 && prices[j] <= prices[j + 1])//价格递增
				j++;
			ret += prices[j] - prices[i];
			i = j;
			while (j < prices.size() - 1 && prices[j] >= prices[j + 1])//递减区间
				j++;
			i = j;
		}
		return ret;
	}
};
